Topology:
	n0 <--  --> n1 <--  --> n2

@[build topology@]

// enable CTS/RTS
UintegerValue ctsThr = (rtscts ? UintegerValue (100) : UintegerValue (2200));
Config::SetDefault ("ns3::WifiRemoteStationManager::RtsCtsThreshold", ctsThr);

NodeContainer nodes;
nodes.Create (3);
stack.Install (nodes);

MobilityHelper mobility;
Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
positionAlloc->Add (Vector (0.0, 0.0, 0.0));
positionAlloc->Add (Vector (100.0, 0.0, 0.0));
positionAlloc->Add (Vector (200.0, 0.0, 0.0));
mobility.SetPositionAllocator (positionAlloc);
mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
mobility.Install (nodes);

NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, nodes);

address.SetBase ("10.1.1.0", "255.255.255.0");
Ipv4InterfaceContainer ints = address.Assign (devices);
@

@[add events@]
ApplicationContainer apps;

OnOffHelper onoff ("ns3::UdpSocketFactory", Address (InetSocketAddress (ints.GetAddress (1), 12345)));
onoff.SetAttribute ("PacketSize", UintegerValue (packetSize));
onoff.SetAttribute ("OnTime",  StringValue ("ns3::ConstantRandomVariable[Constant=1]"));
onoff.SetAttribute ("OffTime", StringValue ("ns3::ConstantRandomVariable[Constant=0]"));

onoff.SetAttribute ("DataRate", StringValue ("1Mbps"));
apps = onoff.Install (nodes.Get (0));
apps.Add (onoff.Install (nodes.Get (2)));
apps.Start (Seconds (1));

PacketSinkHelper sinkUdp ("ns3::UdpSocketFactory", Address (InetSocketAddress (Ipv4Address::GetAny (), 12345)));
apps = sinkUdp.Install (nodes.Get (1));
apps.Start (Seconds (0.001));

Simulator::Stop (Seconds (10));
@

@[configure tracing@]
wifiPhy.EnablePcap ("lab2", devices);
@

